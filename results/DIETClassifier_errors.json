[
  {
    "text": "Can i repeat the same element at the same index",
    "entities": [
      {
        "start": 17,
        "end": 21,
        "value": "same",
        "entity": "info"
      },
      {
        "start": 22,
        "end": 29,
        "value": "element",
        "entity": "info"
      },
      {
        "start": 42,
        "end": 47,
        "value": "index",
        "entity": "info"
      }
    ],
    "predicted_entities": [
      {
        "entity": "info",
        "start": 22,
        "end": 29,
        "value": "element",
        "extractor": "DIETClassifier"
      },
      {
        "entity": "info",
        "start": 42,
        "end": 47,
        "value": "index",
        "extractor": "DIETClassifier"
      }
    ]
  },
  {
    "text": "what is the range of the numbers.",
    "entities": [
      {
        "start": 12,
        "end": 17,
        "value": "range",
        "entity": "info"
      }
    ],
    "predicted_entities": [
      {
        "entity": "info",
        "start": 12,
        "end": 17,
        "value": "range",
        "extractor": "DIETClassifier"
      },
      {
        "entity": "answer",
        "start": 18,
        "end": 20,
        "value": "of",
        "extractor": "DIETClassifier"
      }
    ]
  },
  {
    "text": "i want to code",
    "entities": [
      {
        "start": 10,
        "end": 14,
        "value": "code",
        "entity": "code"
      }
    ],
    "predicted_entities": []
  },
  {
    "text": "switch to different solution.",
    "entities": [
      {
        "start": 0,
        "end": 6,
        "value": "different",
        "entity": "code"
      },
      {
        "start": 10,
        "end": 19,
        "value": "different",
        "entity": "code"
      }
    ],
    "predicted_entities": [
      {
        "entity": "code",
        "start": 0,
        "end": 6,
        "value": "different",
        "extractor": "DIETClassifier",
        "processors": [
          "EntitySynonymMapper"
        ]
      },
      {
        "entity": "code",
        "start": 10,
        "end": 28,
        "value": "different",
        "extractor": "DIETClassifier",
        "processors": [
          "EntitySynonymMapper"
        ]
      }
    ]
  },
  {
    "text": "let me see the solution",
    "entities": [
      {
        "start": 7,
        "end": 23,
        "value": "solution",
        "entity": "solution"
      }
    ],
    "predicted_entities": [
      {
        "entity": "solution",
        "start": 15,
        "end": 23,
        "value": "solution",
        "extractor": "DIETClassifier"
      }
    ]
  },
  {
    "text": "i want to try out a new problem",
    "entities": [
      {
        "start": 20,
        "end": 23,
        "value": "new",
        "entity": "solfail"
      }
    ],
    "predicted_entities": [
      {
        "entity": "solfail",
        "start": 20,
        "end": 31,
        "value": "new",
        "extractor": "DIETClassifier",
        "processors": [
          "EntitySynonymMapper"
        ]
      }
    ]
  },
  {
    "text": "yes want to try out a new problem",
    "entities": [
      {
        "start": 12,
        "end": 33,
        "value": "new",
        "entity": "solfail"
      }
    ],
    "predicted_entities": [
      {
        "entity": "solfail",
        "start": 22,
        "end": 33,
        "value": "new",
        "extractor": "DIETClassifier",
        "processors": [
          "EntitySynonymMapper"
        ]
      }
    ]
  },
  {
    "text": "space complexity is O(n)",
    "entities": [
      {
        "start": 20,
        "end": 24,
        "value": "O(n)",
        "entity": "complexity"
      }
    ],
    "predicted_entities": []
  },
  {
    "text": "it is O(n^2)",
    "entities": [
      {
        "start": 6,
        "end": 12,
        "value": "O(n^2)",
        "entity": "timec"
      }
    ],
    "predicted_entities": []
  },
  {
    "text": "It would come out to be O(log n)",
    "entities": [
      {
        "start": 24,
        "end": 32,
        "value": "O(log n)",
        "entity": "complexity"
      }
    ],
    "predicted_entities": []
  },
  {
    "text": "The time complexity for the problem is O(logn)",
    "entities": [
      {
        "start": 39,
        "end": 46,
        "value": "O(logn)",
        "entity": "complexity"
      }
    ],
    "predicted_entities": []
  },
  {
    "text": "I think it will come out to be O(2^n)",
    "entities": [
      {
        "start": 31,
        "end": 37,
        "value": "O(2^n)",
        "entity": "complexity"
      }
    ],
    "predicted_entities": []
  },
  {
    "text": "it has O(1) space complexity",
    "entities": [
      {
        "start": 7,
        "end": 11,
        "value": "O(1)",
        "entity": "complexity"
      }
    ],
    "predicted_entities": []
  },
  {
    "text": "O(nlogn)",
    "entities": [
      {
        "start": 0,
        "end": 8,
        "value": "O(nlogn)",
        "entity": "complexity"
      }
    ],
    "predicted_entities": []
  },
  {
    "text": "O(n logn)",
    "entities": [
      {
        "start": 0,
        "end": 9,
        "value": "O(n logn)",
        "entity": "complexity"
      }
    ],
    "predicted_entities": []
  },
  {
    "text": "O(n*logn)",
    "entities": [
      {
        "start": 0,
        "end": 9,
        "value": "O(n*logn)",
        "entity": "complexity"
      }
    ],
    "predicted_entities": []
  },
  {
    "text": "move on",
    "entities": [
      {
        "start": 0,
        "end": 4,
        "value": "move on",
        "entity": "move"
      }
    ],
    "predicted_entities": [
      {
        "entity": "move",
        "start": 0,
        "end": 7,
        "value": "move on",
        "extractor": "DIETClassifier"
      }
    ]
  },
  {
    "text": "dry run on given test case",
    "entities": [
      {
        "start": 0,
        "end": 7,
        "value": "dry",
        "entity": "move"
      }
    ],
    "predicted_entities": [
      {
        "entity": "move",
        "start": 0,
        "end": 3,
        "value": "dry",
        "extractor": "DIETClassifier"
      }
    ]
  },
  {
    "text": "i would go with dry running with the given test cases",
    "entities": [
      {
        "start": 37,
        "end": 42,
        "value": "dry",
        "entity": "move"
      }
    ],
    "predicted_entities": [
      {
        "entity": "move",
        "start": 16,
        "end": 19,
        "value": "dry",
        "extractor": "DIETClassifier"
      }
    ]
  },
  {
    "text": "yes i wanna add a test case",
    "entities": [
      {
        "start": 12,
        "end": 27,
        "value": "add",
        "entity": "move"
      }
    ],
    "predicted_entities": [
      {
        "entity": "move",
        "start": 12,
        "end": 15,
        "value": "dry",
        "extractor": "DIETClassifier",
        "processors": [
          "EntitySynonymMapper"
        ]
      }
    ]
  }
]